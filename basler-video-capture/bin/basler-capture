#!/usr/bin/env python3
"""Simple CLI for capturing images and videos using the basler_video_capture
library. This CLI requires that the basler_video_capture library be installed
as well as OpenCV 3 or greater.
"""
import argparse
import time
import sys
import cv2
import basler_video_capture as bvc


def parse_args():
    """Parse command line arguments.
    """
    ap = argparse.ArgumentParser()
    ap.set_defaults(func=None)
    sp = ap.add_subparsers()

    # Parser for enumerating available basler cameras
    enum = sp.add_parser('enumerate', help='Enumerate all available cameras')
    enum.set_defaults(func=main_enumerate)

    # Parser for capturing a video
    vc = sp.add_parser('video-capture', 
           help='Capture the stream into a video file')
    vc.add_argument('--no-gui', action='store_true', default=False, 
            help='Do not use the GUI during video capturing')
    vc.add_argument('-d', '--device', required=True, 
            help='Basler camera serial number')
    vc.add_argument('-g', '--gain', default=None, type=int,
            help='Set the gain for the camera')
    vc.add_argument('-e', '--exposure', default=None, type=int,
            help='Set the exposure time in microseconds of the camera')
    vc.add_argument('-f', '--fps', type=int, default=20, 
            help='FPS of the video, (default: 20)')
    vc.add_argument('-o', '--output', default=False,
            help='Path of the output video file, video not capture otherwise')
    vc.add_argument('-c', '--codec', type=str, default='MJPG',
            help='Codec of the output video')
    vc.add_argument('-w', '--window-size', dest='window_size',
            type=str, default=None,
            help='Viewing window size (default: frame size)')
    vc.set_defaults(func=main_video_capture)

    # Parser for viewing a live Basler video feed
    viewer = sp.add_parser('viewer', help='View live Basler camera feed')
    viewer.add_argument('-g', '--gain', default=None, type=int,
            help='Set the gain for the camera')
    viewer.add_argument('-e', '--exposure', default=None, type=int,
            help='Set the exposure time in microseconds of the camera')
    viewer.add_argument('-d', '--device', required=True, 
            help='Basler camera serial number')
    viewer.add_argument('-w', '--window-size', dest='window_size',
            type=str, default=None,
            help='Viewing window size (default: frame size)')
    viewer.set_defaults(func=main_viewer)

    return ap.parse_args()


def main_enumerate(args):
    """Main for enumerating available Basler cameras.
    """
    cameras = bvc.enumerate_devices()
    
    if cameras:
        print('{} Available Basler Cameras:'.format(len(cameras)))
        for cam in cameras:
            print('\t', cam)
    else:
        print('No available Basler cameras')


def main_video_capture(args):
    """Main for capturing a video from the camera.
    """
    print('[INFO] Initializing camera', args.device)
    cap = bvc.BaslerVideoCapture(args.device)

    if args.gain is not None:
        print('[INFO] Setting the gain to', args.gain)
        cap.set_gain(args.gain)
    if args.exposure is not None:
        print('[INFO] Setting the exposure to', args.exposure)
        cap.set_exposure(args.exposure)

    print('[INFO] Initializing video writer')
    ret, frame = cap.read()
    h, w = frame.shape[:2]

    if args.window_size is None:
        win_w, win_h = (w, h)
    else:
        win_w, win_h = args.window_size.split('x')
        win_w = int(win_w)
        win_h = int(win_h)

    if not args.no_gui:
        cv2.namedWindow('Basler Capture', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('Basler Capture', (win_w, win_h))

    fourcc = cv2.VideoWriter_fourcc(*args.codec)
    writer = cv2.VideoWriter(args.output, fourcc, args.fps, (w, h), True)

    font = cv2.FONT_HERSHEY_SIMPLEX
    tl = (0, h - 50)  # Computing the recording text location for GUI

    print('[INFO] Starting video capture')
    start = time.time()
    frames = 0

    try:
        while True:
            ret, frame = cap.read()
            writer.write(frame)

            text = 'RECORDING: {0:.2f}sec'.format(time.time() - start)

            if not args.no_gui:
                cv2.putText(frame, text, tl, font, 2, (0, 255, 0), 3, cv2.LINE_AA)
                cv2.imshow('Basler Capture', cv2.resize(frame, (win_w, win_h)))

            sys.stdout.write('\r')
            sys.stdout.write('[INFO] ' + text)
            sys.stdout.flush()
            frames += 1

            if not args.no_gui:
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
    except KeyboardInterrupt:
        print('[WARN] Quitting...')
    finally:
        delta = time.time() - start
        fps = frames / delta
        print('[INFO] FPS:', fps)
        print('[INFO] Cleaning up...')
        if not args.no_gui:
            cv2.destroyAllWindows()
        writer.release()


def main_viewer(args):
    """Main viewing live Basler video feed. 
    """
    print('[INFO] Initializing camera', args.device)
    cap = bvc.BaslerVideoCapture(args.device)

    if args.gain is not None:
        print('[INFO] Setting the gain to', args.gain)
        cap.set_gain(args.gain)
    if args.exposure is not None:
        print('[INFO] Setting the exposure to', args.exposure)
        cap.set_exposure(args.exposure)

    cv2.namedWindow('Basler Viewer', cv2.WINDOW_NORMAL)

    print('[INFO] Initializing viewer')
    ret, frame = cap.read()
    h, w = frame.shape[:2]

    if args.window_size is None:
        win_w, win_h = (w, h)
    else:
        win_w, win_h = args.window_size.split('x')
        win_w = int(win_w)
        win_h = int(win_h)

    cv2.resizeWindow('Basler Capture', (win_w, win_h))
    frames = 0
    start = time.time()

    try:
        print('[INFO] Starting viewer')

        while True:
            ret, frame = cap.read()
            cv2.imshow('Basler Capture', cv2.resize(frame, (win_w, win_h)))
            frames += 1
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
    except KeyboardInterrupt:
        print('[WARN] Quitting...')
    finally:
        delta = time.time() - start
        fps = frames / delta
        print('[INFO] FPS:', fps)
        print('[INFO] Cleaning up...')
        cv2.destroyAllWindows()


def main():
    """Main method
    """
    args = parse_args()
    bvc.initialize()  # Initializing the basler_video_capture library 
    if args.func is None:
        print('[ERROR] Please select a command to run')
    else:
        args.func(args)


if __name__ == '__main__':
    main()

